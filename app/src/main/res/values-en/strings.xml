<resources>
    <string name="service_is_not_responding">ServiceI is not awaliable at the moment</string>
    <string name="app_name">ModellingInfo</string>
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="main">Home</string>
    <string name="favourite">Favourite</string>
    <string name="modelling_for_games">3D modelling\nfor videogames</string>
    <string name="search">Search</string>
    <string name="settings">Settings</string>
    <string name="blocking">Blocking</string>

    <string name="language">Language</string>
    <string name="interface_str">Interface</string>
    <string name="account">Account</string>
    <string name="text_size">Font size</string>

    <string name="russian">Русский</string>
    <string name="english">English</string>

    <string name="color_theme">Color scheme</string>
    <string name="dark_theme">Night theme</string>
    <string name="light_theme">Day theme</string>
    <string name="notification_sound">Notifications and sounds</string>
    <string name="notification">Notifications</string>
    <string name="sound">Sounds</string>
    <string name="nickname">Nickname</string>
    <string name="two_lines">There will be 2 strings\nfor testing</string>
    <string name="tiny">Small</string>
    <string name="medium">Middle</string>
    <string name="big">Big</string>
    <string name="no_favourite_items_yet">There are no favourite articles yet</string>
    <string name="to_main_page">To home page</string>
    <string name="enter_at_least_two_symbols">Enter at least 2 symbols…</string>
    <string name="nothing_was_found">Nothing was found</string>
    <string name="find">Search</string>

    <string-array name="theme_titles">
        <item>Draft</item>
        <item>Grid</item>
        <item>Flat Pattern</item>
        <item>Bake</item>
        <item>Textures</item>
    </string-array>

    <string-array name="article_titles_1">
        <item>General information</item>
        <item>References</item>
        <item>Analysis of the model</item>
        <item>Blocking</item>
        <item>Detail</item>
        <item>Paint the draft with color</item>
        <item>Common mistakes</item>
    </string-array>

    <string-array name="article_titles_2">
        <item>General information</item>
        <item>Low Poly</item>
        <item>High Poly</item>
        <item>Mid Poly</item>
    </string-array>

    <string-array name="article_titles_3">
        <item>UV scan</item>
        <item>Unique mapping</item>
        <item>Tile mapping</item>
        <item>Atlas</item>
        <item>Common Mistakes</item>
    </string-array>

    <string-array name="article_titles_4">
        <item>General information</item>
        <item>Preparation</item>
        <item>Normal map</item>
        <item>Ambient Occlusion</item>
        <item>Color ID</item>
        <item>Artifacts</item>
    </string-array>

    <string-array name="article_titles_5">
        <item>Material creation</item>
        <item>PBR</item>
    </string-array>

    <string-array name="article_bodies">
        <item>Первым этапом при выполнении модели, является создание чернового варианта модели, или драфта. На данном этапе нет необходимости нагружать модель деталями (например, при создании модели самолета, показать сразу же местополо-жение всех заклепок на корпусе), а следует лишь создать простой примитив, который будет соблюдать пропорции модели и иметь схожий с ней силуэт. Начинать выполнение данного этапа следует с подбора референсов. Референсами называются фотографии, различные рисунки, видеоряды и видеоролики с участием того объекта, который моделлер собирается мо-делировать. Это позволит изучить его более подробно, обратить внимание на различ-ные детали, присущие данному объекту, понять из каких материалов он состоит или может состоять, а также уделить внимание его возможным по-вреждениям, которые могут быть также отражены при моделировании. После подбора референсов и их анализа, следует процедура блокин-га. Блокингом называют процесс создания наброска модели из базовых объемных фигур – кубов, цилиндров, сфер. В итоге выполнения данной операции, мы получим «читаемый» (то есть позволяющий с уверенностью определить, что повторяет данная модель) силуэт. Далее следует процедура детализации, или детейлинга. При ее вы-полнении, перед моделлером стоит задача дополнить ранее созданный драфт деталями, которые помогут улучшить узнаваемость модели, сделать её более осмысленной. Также на данном этапе следует предусмотреть де-тали механики анимирования модели, чтобы в дальнейшем можно было понять, как модель анимируется, двигается и какие действия она может совершать. Дополнительно при выполнении данной процедуры, имеет смысл окрашивать элементы в базовые цвета - это позволит более наглядно по-нять и оценить моделлеру дальнейшее восприятие модели. После выполнения всех вышеперечисленных процедур, конечным результатом выполнения этапа драфта станет черновой вариант модели. В неё будет заложена первичная механика поведения модели, цветовая па-литра которая в дальнейшем поможет моделлеру при разработке и создании текстур для модели, а также будет обладать важными деталями, которые помогут более точно отразить смысл модели и выдержать общую стилистику проекта. Дополнительно стоит отметить, что при выполнении дан-ного этапа моделирования не следует уделять большое внимание общей геометрии модели. Так как процесс драфта является самым креативным с точки зрения разработки всей модели, то при создании будет появляться большое количество лишних элементов, будь то некорректное наложение бликов, лишние точки сетки модели и так далее. Уделение внимания дан-ным неточностям на этапе драфтинга не позволит моделлеру сосредоточиться и воплотить в полной мере задумку модели. По итогам выполнения первого этапа, в качестве самопроверки, мо-деллер глядя на созданный им драфт, должен иметь положительный ответ на следующий список вопросов, касающихся финального результата: Силуэт модели узнаваем и понятен? Выбранные моделлером пропорции совпадают с пропорциями вы-бранного образца для модели? Присутствуют ли на модели все ключевые детали, помогающие по-нять ее смысл, принцип работы, механику движений? Определена ли базовая палитра модели? Полученный в процессе выполнения работы результат, устраивает моделлера? Следует также отметить, что полученному результату категорически не рекомендуется изменять в будущем существующую форму. После завершения данного этапа моделлер переходит к техническим этапам, в процессе выполнения которых в модели будут исправляться чер-новые ошибки и добавляться новые детали.</item>
        <item>Работа с референсами Референсы — ключ к выразительности и пониманию модели. Качество работы = скилл умноженный на референсы. Без рефов не получится нормальная модель.Какие бывают референсы: Концепт — рисунок, который показывает, как в будущем должна выглядеть модель. Это ее общий вид, который утвердил арт директор и геймдизайнер. На каждой картинке видны силуэт будущей модели и крупные формы. Обычно на проектах есть концепт–дизайнеры, которые придумывают, как будут выглядеть объекты в игре. Если ты попал на проект без концептора — их нужно придумывать или искать самому. Фотографии — нужны, чтобы лучше понять силуэт и составляющие модели. Работа художника — это подражание реальному миру, поэтому сначала стоит искать референсы в реальности или на фотографиях, потому что любой рисунок — не объективный референс. Работы других художников — скорее всего ты не первый, кто моделит эту вещь. Полезно посмотреть какую работу проделали другие моделлеры и понять, какой путь они прошли. Опыт десятков других художников заслуживает отдельной категории референсов. Детали — помогают понять, как функционирует объект и как детали крепятся друг к другу. Например, для детализации модели башни ЦПУ из Blindspot (та самая, на которую мочится и которую взрывает Суи) использовались референсы шасси самолета. Материалы, текстуры — важно найти хорошие фотографии и арты с выразительными текстурами и фактурами. Из головы хороший материал не сделать, поэтому важно запастись рефами. Повреждения и потертости — у разных объектов они сильно отличаются. Из всех возможных «50 оттенков ржавчины» для проекта нужно выбрать 2–3, которые ты будешь использовать. Очень часто, даже опытные художники считают, что они могут выдумать повреждения из головы, но это почти нереально. Повреждения — это сложные формы, за которыми видно устройство объекта. Без референсов хорошие повреждения не сделаешь. Где брать референсы Фотографировать Все, что понравилось снимай на камеру. Фотографии всегда точные, в отличии от концептов. Если сфоткал грузовик, значит так он выглядит в реальном мире. Это лучший способ понять каждую деталь модели. Собирать работы других художников У фотографий есть проблема — они не всегда выразительны. Анализируй работы других художников, чтобы узнать много нового. Модели редко копируют 1 к 1. Их делают более интересными и выразительными. Какие-то детали опускают, а на некоторые элементы добавляют акцентов. Искать на тематических сайтах Если моделишь военную технику — изучай Википедию и исторические сайты. Там есть реальные фотографии и чертежи. Ты найдешь не только референсы, но и больше узнаешь про модель и ее место в истории. Военная техника — яркий пример, а тематические сайты есть почти по каждой теме. Смотреть кино, играть в игры Если моделишь космический корабль — пересмотри Звездные Войны, поиграй в Infinite Warfare. Ты увидишь модель в действии и наделаешь кучу скриншотов. Искать доски на Pinterest Pinterest — кладезь референсов. Художники собирают огромные подборки рефов. Регистрируйся и начинай поиск. Подписываться на классных художников в соцсетях Facebook, ArtStation, Behance — подписывайся на топовых художников и вдохновляйся. Спустя несколько месяцев, твоя лента станет ценным источником рефов на любую интересующую тебя тему. Куда собирать референсы Не храни референсы только в одной папке. Так они сольются в одну цветную кашу и ты не сможешь найти нужный референс. Чтобы такого не было, рефы нужно группировать. Каждая категория — отдельная папка на компьютере или новая группа в программе PureRef. Вот 3 самых удобных способа: Папки на компеДоска на Pinterest. Для каждой работы создай новую В программе PureRef Если моделишь в команде — есть смысл завести папку на Dropbox.Вот так выглядит хорошая работа с референсами.</item>
        <item>Ты уже собрал и разложил по полочкам референсы. Отлично, но пока не начинай моделить. От того, что ты просто собрал референсы — толку нет. Твоя задача — получить из них ценную информацию и понять, что ты будешь моделить. Уже после этого можно создавать первые полигоны. Чтобы проанализировать модель, ответь на такие вопросы: Из каких примитивов состоит модель. Все модели состоят из нескольких простых объектов — пары прямоугольников, сфер или цилиндров Определи, из каких крупных форм состоит будущая модель. Пойми механику модели и как выделить формы. Лучший способ это сделать — понять, как устроена модель, из каких частей она собрана и как объекты крепятся друг ко другу. Есть полезный прием — подумай, каким дополнительным объектом или деталью передать масштаб модели. Это делают с помощью средних или мелких форм. Какие детали на референсе помогают тебе понять, насколько большой или маленький объект. Это может быть лестница, антенна, провода или дерево рядом с моделью. В мире есть вещи, размер которых все узнают. Курок пистолета всегда примерно одного размера или, например, дверь в дом. Такие вещи делают масштаб понятным для игрока. Какие цвета использовать для модели. На работе бывает сложно определиться с цветовой гаммой. Потому, наш студент придумал классный лайфхак. Он поможет тебе посмотреть на референс и быстро определить, из каких цветов он состоит. Для работы с цветом, можно собирать отдельные референсы. На них может быть нарисовано все, что угодно. Главное, чтобы цвета были топовыми. Выбери 3–4 цвета, холодную и теплую палитры, которые будешь использовать для модели.</item>
        <item>Пришло время создавать полигоны. Сначала моделируй крупные формы, которые образуют силуэт. Помни про пропорции, масштаб и механику объекта. Он должен быть узнаваем, даже без детализации. На блокинг средней модели у тебя должно уходить не более 40 минут.Если ты тратишь больше 40 минут, то, скорее всего, ты потратил кучу времени на вещи, не влияющие на силуэт — то-есть не справился с этим этапом. Есть 2 момента, о которых нельзя забывать во время блокинга: Силуэт На этом этапе из простых форм мы делаем объект читаемым. Начинающие трехмерщики забывают, что визуальное восприятие любого объекта начинается с силуэта. Нет смысла моделить детали, если силуэт не читается. Создай несколько примитивов, которые образуют формы объекта. Следи за тем, чтобы силуэт легко читался и не был скучным. Если не вышло — переделывай, потому что потом даже красивые текстуры не спасут модель. Создай несколько примитивов, которые образуют формы объекта. Следи за тем, чтобы силуэт легко читался и не был скучным. Если не вышло — переделывай, потом будет поздно — никакие текстуры такую модель не спасут! Масштаб и пропорции Чтобы понять масштаб объекта, его нужно с чем-то сравнить. Для наших глаз все относительно. Чтобы масштаб легко было читать, добавь к модели дополнительные детали или объекты. Например, у пачки хлопьев и 20-ти этажного здания может быть одинаковая форма в основании — прямоугольник. Но на здании кондиционеры, антенны, провода и прочие мелкие детали создают ощущение масштаба здания. Не забывай о пропорциях. Качай глазомер. Моделлер новичок может создать комнату с 3-ех метровой дверью и забыть про пропорции. В такой комнате будут стулья для карликов. На этапе блокинга следи, чтобы пропорции были правильными. Для этого найди объект по которому будешь сверять размер других моделей. Пока на этапе блокинга нет большой детализации — ошибки исправлять легко. Не забывай про особенности восприятия человека. Старайся избегать параллельных линий, потому что в природе они встречаются редко, из-за этого модель будет смотреться неестественно. Но у правила есть и исключения. Если моделишь предметы созданные человеком — в их структуре могут быть параллельные линии. Например, рельсы. Когда блокинг готов и ты уверен в пропорциях, масштабе и силуэте — переходи к детализации.</item>
        <item>На этом этапе мы разбираемся с механикой модели, чтобы зритель мог поверить в ее реалистичность. Проработай переходы между геометрией и смысловые детали. Тогда модель будет выглядеть не только правдоподобно, но и интересно. На этапе детализации мы не заморачиваемся над сеткой. Пока что мы ищем правильные формы. Запариваться над сеткой на этом этапе — нарушение последовательности пайплайна и пустая трата времени. Потому, это «детальный драфт», а не готовая модель. Детализация — отличное время, чтобы распределить цвета по модели, чтобы лучше понимать ее финальный вид. Это помогает разобраться с акцентами и проработать палитру задолго до текстурирования. Что нужно обязательно сделать на этапе детализации Во время блокинга мы не тратим лишнее время на плавность линий. Например, плавные крылья на автомобиле лучше делать когда силуэт готов. А иначе, если придется менять силуэт — работа была напрасной. Заняться плавностью модели следует во время детализации. Уделяем особое внимание переходам. Запчасти редко вставляют одну в другую. Они или сварены или вкручены гайками. Отсюда появляются швы или фаски. Это и называется переходы. Дорабатываем механику объекта. Для этого нужно изучить рефы, чтобы понять как работает механизм в реальной жизни. Если моделишь грузовик, узнай, как устроена подвеска. Для этого не нужно быть инженером, ведь зритель вряд ли заметит, что ты немного сместил амортизаторы. Достаточно хорошо изучить реф из реально жизни. Доработай по мелочи. Убираем слишком заметные параллельные линии и разбавляем симметрию. Добавляем детали, которые помогут рассказать историю с помощью твоей модели. Если моделишь для портфолио, можно пропускать несколько этапов пайплайна, это нормально. А вот с играми такое бывает редко. Для начинающих трехмерщиков мы рекомендуем большую часть моделей делать драфтами и не идти дальше. Научись моделить читаемые драфты, прежде чем учить сетку, запечку и прочие технические этапы.</item>
        <item>Зачем красить драфт Покраска драфта позволяет на раннем этапе отработать цветовые решения и подобрать палитру — как для одиночной модели, так и для целой локации. И всё это — с помощью простых инструментов. Бывает очень обидно после часов, а возможно и дней работы осознать, что твоя текстура просто не подходит, цвета не сочетаются, и надо всё переделывать. Драфт может быть самобытным арт-объектом, а не просто начальной стадией модели. Объектом, который не стыдно оставить в своем портфолио или поделиться с друзьями. Выразительный силуэт, интересные средние формы и классная покраска могут показать, что вы не только умеете хорошо моделить, но и понимаете цвет, — а это не менее важный навык. При грамотном подходе получаются очень выразительные объекты и сцены: Так что если вы отправите клиенту, лиду или арт-директору на рассмотрение драфт не в сером материале, а с качественной покраской, скорее всего, он это оценит. К тому же вы проверите, насколько сходятся ваши вкусы и планы относительно этой модели. Покраска драфтов позволяет новичкам понять цвет, попробовать разные палитры, да и вообще определиться, что же такое «палитра». И всё это при помощи самых простых инструментов: без UV, новых программ и сложного текстурирования, — всё в одном 3D-редакторе. Про прокраску Главные элементы хорошего драфта — это качественно подобранные цвета (палитра) и геометрия, обозначенная тоном. Начнём с последнего. Наряду со светотенью и перспективой один из важнейших механизмов восприятия — это бинокулярное зрение. Оно работает благодаря сложнейшему физиологическому механизму зрения — фузии (‪‎лат. fusio — слияние), то есть слиянию зрительных образов в единое зрительное восприятие. Больше 50% всего восприятия объекта — это как раз бинокулярное зрение. Всё, что мы видим на экране монитора — это плоская картинка, на которой бинокулярное зрение не работает (за исключением случаев использования 3D-очков). Поэтому один и тот же объект в живую и на экране будет восприниматься по-разному. Чтобы компенсировать потерю части восприятия при создании компьютерной графики приходится идти на ряд ухищрений. Одно из них — «цветовая модуляция». Изменяя тон выделяют геометрию и формы внутри силуэта модели. Характерно это как для полноценных текстур, так и для покрашенных драфтов. Далее — несколько работ для примера. Обратите внимание, как выделены деревья и зверёк. Использован очень скромный набор цветов, но мы отлично считываем как основные объекты, так и настроение с сцены. Эта работа выполнена с применением однотонных тонов — их называют flat color или flat shaiding Base color (flat color) — техника, при которой используют только однотонные цвета без градиентных переходов и динамических теней. Также её называют «Плоскостной затушовкой» или «Постоянным затенением». А вот еще одна работа. В ней формы выделены с помощью градиентных переходов, а объем подчеркивают подкрашенные фаски. Скрины сделаны в режиме base color (без бликов и теней), но мы всё равно отлично считываем объем. Теперь рассмотрим несколько одинаковых моделей с разной степенью покраски. По мере выделения геометрии тоном внутренние формы модели становятся всё более четкими и выразительными. Рассмотрим те же модели, но уже в режиме Base color. Вариант — робот в сером материале Происходит разбивка на основные цвета, но один жёлтый акцент смотрится неинтересно. На третьем варианте в покраске появляются переходы, модель становятся интереснее за счёт синих осей, а жёлтый глаз поддерживается жёлтым поясом. Добавляется разбиения по тонам для выделения вырезов В итоговой версии появляется детализация тоном. При покраске всегда проверяйте, как ваши цвета выглядят в режиме base color. В режиме рендера, с тенями, бликами, а зачастую и с фильтрами постобработки, часто тяжело понять, что ухудшает выразительность, — плохо подобранные цвета, некорректное освещение или фильтры. Также не стоит забывать, что ваша модель может быть использована в разных локациях и при разном освещении — особенно если речь о геймдеве. Но base color — ваше основное цветовое решение, — будет продолжать работать даже в очень затемненных/высветленных условиях. На рисунке ниже видно, как меняется восприятие моделей разных версий по мере ухудшения освещения. Отдельно отмечу тайловые материалы, такие как плитка, кирпич, черепица. При равномерном выделение граней тоном мы получим интересный отдельный элемент (кирпич, камень и т.д.) Но в массиве это не работает и не обеспечивает нужной степени выразительности. Более эффективным приёмом будет выделение отдельных «кирпичей» или «плиток» тайлового материала другим тоном. Подобный приём используется уже очень давно, — например, в отделочных материалах. Как это часто бывает, решение подсказал реальный мир. Вот пример стандартной черепицы без какой либо разбивки по тону элементов. Смотрится неплохо, но несколько скучно. Но как только мы добавляем разнообразие тона, черепица начинает смотреться совершенно по другому. На днях мне попался старый немецкий дом с очень выразительной кровлей Если повысить насыщенность тона, распределение цветовых пятен становится более явным. Не так давно зашёл в одну из новых кофеен: хозяин заведения явно не поскупился и воспользовался услугами профессиональных дизайнеров. Видно это было по отделке и подбору цветов, — как отдельных элементов, так и помещения в целом. Но я обратил внимание на напольную плитку. В глаза бросается разбивка по тону: Будьте внимательны при обозначении разным тоном отдельных частей геометрии или элементов в общем массиве. Слишком контрастные цвета могут испортить выразительность вашей работы: наш мозг будет воспринимать их как совершенно разный материал. Отдельно обращу внимание на такие материалы, как камень и дерево. Существуют стереотипы о их цвете: камень — серый, дерево — светло-коричневое. Отчасти это верно, но оба этих материала намного богаче по цветовой палитре. Как видно из палитр выше, камень — очень разнообразный материал, в котором могут присутствовать как холодные, так и тёплые тона. Дерево не сильно уступает камню по богатству тона. Теперь немного теории. Сразу предупреждаю: это — лишь маленькая памятка в несколько абзацев, в которой очень поверхностно затрагивается теория цвета. Сам по себе цвет — это очень большая и непростая тема, по которой написано немало книг и сломано не меньше копий. Для лучшего понимания — немного физики. Свет, если сузить и упростить это понятие, можно назвать потоком фотонов. Когда мы говорим: «эта чашка красная», то на самом деле имеем в виду, что молекулярный состав поверхности чашки поглощает все световые фотоны, кроме красных. Если солнечный свет пропустить через трехгранную призму, как поступил сэр Исаак Ньютон в 1676 году, то мы получим спектр из семи цветов — красный, оранжевый, желтый, зеленый, голубой, синий и фиолетовый. Когда мы видим радугу, это как раз небо выступает в роли огромной призмы. Диапазон света который мы можем воспринимать, ограничен. Отсюда и формируются тона, которые мы воспринимаем. Но особенно выделяются красный, синий и зеленый. На основе этого создана шкала — RGB (аббревиатура английских слов red, green, blue — красный, зелёный, синий) — аддитивная цветовая модель, которая описывает способ кодирования цвета для воспроизведения с помощью трёх цветов, которые часто называют основными. Все остальные тона и оттенки получают с помощью их смешивания. Выбор «основных» цветов обусловлен особенностями восприятия цвета сетчаткой человеческого глаза. Ощущение цвета возникает в мозге при возбуждении и торможении цветочувствительных клеток, — колбочек. У человека и приматов существует три вида колбочек, которые различаются по спектральной чувствительности, — ρ (условно «красные»), γ (условно «зелёные») и β (условно «синие»). Отсюда и подобное восприятие. Но что нам это дает на практике? Возьмём оранжевый шар. Его цвет формируется путём поглощения синих фотонов и отражения красных и зелёных, смесь которых и дает оранжевый. В современных рендерах используется в основном физически корректный рендеринг (Physically based rendering - PBR) — метод затенения и рендеринга, обеспечивающий точное представление взаимодействия света с поверхностями. Поэтому и взаимодействие цвета и света происходит на основе их физических характеристик. Так что если осветить наш оранжевый шар насыщенным синим светом, то он будет скатываться по цвету в черный спектр. Всё дело в фотонах: так как наш источник освещения испускает в первую очередь синие, то оранжевая поверхность их практически полностью поглощает. Чёрный — это по факту не цвет, а отсутствие отраженных фотонов: что-то вроде «дыры» в нашем зрении. Чуть сместим тон света: пускай цвет шара будет искажённый, но он появится. При этом интенсивность источника освещения осталась на том же уровне Поэтому если вдруг в вашей сцене после настройки освещения — особенно интенсивного с насыщенными цветами, — какие то элементы начали скатываться в черный спектр, не стоит паниковать. Возможно, всё дело в фотонах, и ситуация заметно улучшится, когда вы сместите тон освещения. Подбор цвета и палитры значительно упрощает цветовой круг. В каком-то смысле это такая «таблица Менделеева» для цвета. Этот круг был создан путём анализа наиболее гармоничных сочетаний цветов, и их взаимодействия. Сейчас самый распространённый вариант цветового круга — RGB. Вернемся к нашему шару. Цвет объекта и цвет света находятся на противоположных сторонах круга, — все подобные сочетания дают эффект с отсутствием отраженных фотонов. Сочетание двух цветов, расположенных друг напротив друга на цветовом круге, дают чёрный только когда речь идет о связке цвет—свет. Для подбора тона и работы с палитрами цвета, расположенные на противоположных сторонах круга, также крайне важны, хотя и работают по другому принципу. Подобные цвета комплиментарными, дополнительными или контрастными. В разных источниках: книгах, лекциях и методических пособиях вы можете услышать подобные определения, но касаются они одного и того же явления. Эти цвета отлично сочетаются друг с другом, и если в вашей работе вы остановили свой выбор на двухцветовой схеме, то ваш выбор — комплиментарные цвета. Данный принцип, как и описанные выше имеет прямое отношение к физиологии человека. Посмотрите пристально на зеленый квадрат, а потом закройте глаза, — и в качестве остаточного изображения у вас перед глазами возникнет красный. Можно повторить данный опыт на любом из цветов круга и каждый раз остаточным изображением будет его комплиментарный цвет. Но почему нам нравится данное сочетание? Исследователи полагают, что физическое смешивание противоположных цветов даёт серый, — цвет, который считают признаком гармонии. Если попытаться повторить выше указанный опыт на средне-сером цвете, то никакого остаточного изображения не появится: нашему мозгу не потребуется «компенсация». Цветовой круг нередко называют — хроматическим, то есть отражающим цвета видимого спектра. Хроматический круг существенно облегчает подбор палитры. Например, схемы на основе треугольника (всегда равнобедренного) квадрата или ромба как бы отсекают «лишние» цвета: использовать можно только те, что внутри фигуры.</item>
        <item></item>

        <item>Из чего состоит любая 3D-модель Сетка — технический этап и он требует понимания технологий. Прежде чем говорить о работе с low poly и high poly давай разберем из чего состоят все модели и какие особенности игровых движков нужно знать. Любая 3D модель состоит из: ⚫️ Точек (vertex, вертекс) ➖ Рёбер (edge, эдж) ⬛️ Плоскостей (tris, polygon, nGon, трис, полигон, эн-гон) #1 Точки (вертексы) Это простейший элемент модели. У каждой точки есть 2 параметра: координаты в пространстве и направленность. Положение в пространстве — это ее положение по осям x, y, z; Направленность еще называется «вертекс нормаль». Вертекс нормалей влияет на поведение света на поверхности модели. В игровых движках свет работает не так, как в реальном мире. В играх свет — это математическая абстракция. #2 Рёбра (edge) Ребро — это 2 точки, которые соединены линией. У каждой из этих точек есть вертекс нормалей. #3 Полигоны (polygons) Из точек и ребер мы создаём многоугольники. В геймдеве их называют полигоны. Самый простой полигон состоит из 3 точек — это треугольник. Помимо треугольников, есть четырехугольники (quad/квад) и многоугольники (n-gons/нгоны). Так что, ты можешь создать полигон из любого количества точек. Но учти — во всех игровых движках и 3D-программах все состоит из треугольников. Поэтому, когда ты делаешь квад или нгон — программа автоматически превращает их в треугольники (это называется триангуляция). У разных программ свои алгоритмы триангуляции. Потому, одна и та же модель в разных программах выглядит по-разному. Из-за разных алгоритмов триангуляции модель меняется, когда мы добавляем ее в игровой движок. Если не хочешь, чтобы программа искажала модели — перед экспортом триангулируй полигоны вручную. Триангуляция — одна из ключевых задач создания игровой сетки. Мы переводим всё в треугольники руками, чтобы блики были одинаковыми. Если на модели есть квадрат и все точки лежат в одной плоскости — проблем с бликом скорее всего не будет. Но если одна или несколько точек выходят за пределы плоскости, могут начаться проблемы. Поэтому, внимательно следи за такими полигонами. Что такое запечка нормала Нормали — это векторы, которые определяют, как свет отражается от поверхности. Они есть у каждой точки модели. Если их изменить, поменяется поведение света. Но векторы отражения нельзя поставить на случайное место, они находятся у точки. Добавить нормаль внутри полигона не получится, их нужно фиксить руками в том месте, где есть вертекс (точка). Но есть крутая технология — карта нормалей (Normal Map), которая помогает обойти этот этап. Карта нормалей — это текстура, которая создает виртуальные вертекс нормали внутри каждого пикселя. Вот простой куб: Normal Map у него будет выглядеть как на фото внизу. По сути, это отсутствие карты нормалей, он никак не влияет на твою модель. Синий цвет означает, что нормали перпендикулярны поверхности. А теперь откроем фотошоп и добавим на него вот такую детальку: В красном канале горизонтальный градиент, в зеленом канале вертикальный. А теперь смотри что будет, если Normal Map привязать к модели: Normal Map не рисуют руками, для этого используют технологии запечки и рисования нормала. Скопируй этот куб в отдельный файл и замодель на нем любую детализацию. Теперь у нас 2 файла — обычный куб и куб с кучей деталей. Обычный куб — это low poly модель, в которой нет лишней детализации. Такую модель мы вставляем в игровой движок, потому что она не сильно детализирована и не перегружает его. А есть high poly модель — куб с кучей деталей. Технология «запечки» позволяет перенести вертекс нормали с детальной модели на легкую low poly и сохранить их в Normal Map. В этом случае в кубе 6 полигонов, а модель отражает свет, как куб с кучей деталей. Обычный куб с Normal Map бликует как детализированная модель, хотя детализации в нем нет. Это просто хитрое искажение вертекса нормалей с помощью отдельной текстуры. В карте нормалей каждый пиксель создает на поверхности виртуальную вертекс нормаль (точку с отражением света). Нейтральный голубой цвет (128,128,255 RGB) означает, что оригинальная вертекс нормаль не будет меняться. Красный канал отвечает за отклонение нормали влево или вправо, зеленый — вверх или вниз. Синий имитирует глубину. Что происходит с сеткой после драфта? Как только мы закончили драфт модели, на нем уже есть сетка. Но она еще не оптимизирована для игры. Внизу, на примере машины показан драфт, на котором из-за большой детализации превышен лимит полигонов. Если листнешь вправо, увидишь разницу по количеству полигонов на этапе драфта, LowPoly и HighPoly. Драфт нельзя засунуть в игру. В нем либо движок неправильно стриангулирует сетку, либо лимит по полигонам будет превышен. Потому, для игр нужны легкие модели из треугольников и минимума полигонов. Такая модель называется LowPoly. Вспомни наш куб. Все 8 точек влияют на силуэт, удалять ничего нельзя, иначе это будет уже не куб. Это и есть LowPoly модель, которую вставляют в игровой движок. По пайплайну, детализацию модели мы делаем с помощью запечки HighPoly на Normal. Поэтому мы должны взять драфт, сделать его супер детализированным, а потом запечь детали и накинуть их на LowPoly модель. Если работаешь по пайплайну для игры — на этапе сетки нужно сделать LowPoly и HighPoly с правильной топологией. Три вида сетки LowPoly — упрощённая модель для игры с минимальным количеством полигонов. HighPoly — детализированная модель, которая нужна, чтобы перенести всю детализацию на low poly через Normal Map. MidPoly — компромис между бесконечно детализированными high poly и оптимизированными low poly. Используется в основном для кино. Давай разберём каждый из трёх видов по отдельности.</item>
        <item>LowPoly для видео игры нужно делать легкой, с небольшим числом полигонов. Все плоские детали рисуют в текстурах или на нормале, а геометрией отбивают только объекты, которые влияют на силуэт. Low poly для разных игр отличаются. На мобилках low poly очень легкая, 2к — 10к треугольников. На ААА–проектах только на главного персонажа может выйти 50–60к треугольников. А бывают проекты по 250к треугольников на персонажа. В этой модели 55,4к треугольников А эта моделька идеально подойдет для мобильной игры, в ней всего 3,2к треугольников. Low poly сильно зависит от технологии. В мобильной игре, на важном объекте 5–7к полигонов. В старых играх важные объекты были по 10–20к полигонов. Современные игры тянут модели по 50–150к полигонов. А бывают модели и по 200–300к полигонов, например, корабли, танки или дома. Откуда берётся лимит на low poly? Представь, что технический директор высчитал ограничение на локацию в 10 млн полигонов и 200 материалов. Получаем по 150–200 моделей в которых от 10 до 100к полигонов. Это ограничение взялось из производительности движка и железа, под которое делается игра. Как сделать low poly? Вот главные правила: На low poly важны полигоны, которые влияют на силуэт формы. Элементы, которые не видишь нужно удалять. Всё, что слишком угловато на силуэте — округляй. Иногда для этого надо добавить новую геометрию. Все плоские детали, не влияющие на силуэт, рисуются через текстуры или на нормале. Цилиндры кратны 4, а число сечений зависит от размера цилиндра На нижнем ряду маленькие цилиндры слишком плотные, а большие недостаточно детальные Удаляй задние стенки у объектов. Пересекающиеся объекты утапливай друг в друга. Но не переусердствуй — тогда впустую потратишь место на развертке. Ставить их впритык друг к другу тоже ошибка — может появиться зазор, через который шов будет некрасиво бликовать. Перед запечкой переноси сложные формы в треугольники. А четырехугольники и многоугольники триангулируй вручную. В одной программе может быть норм, а в другой будет кривой блик или форма. На этапе low poly, это делать не обязательно, т.к. развёртку проще делать с квадратами, но потом этот момент нужно учесть. Одна и та же модель с разной триангуляцией</item>
        <item>High poly — это детализированная модель без ограничений по полигонам. Такие модели делают концепторы, а в видеоиграх они нужны для запечки нормала. На high poly можно всё, потому что нет ограничений по полигонам. Главное ограничение — чтобы файл открылся на компе. На high poly работают с квадратами вместо треугольников, а от угловатостей избавляются при помощи сглаживания. В игровой движок такую сетку не засунешь, но она может быть сколько угодно детализированной и гладкой. 3 способа сделать high poly: В видеоиграх high poly нужна для запечки нормала. Для сложных органических форм первым делают high poly, а потом «ретопят» в low poly. Cабдив (subD) — это создание high poly через поддержки. Ты делаешь формы, накладываешь поддержки, они правильно скругляются и получается более гладкая модель без угловатостей. Самое важное на сабдиве — понять, как строить лупы и кольца полигонов, чтобы они подчеркивали форму модели. Слева полигональные кольца направлены без учета формы, а справа они аккуратно обводят угол. Скульпт — это как пластилин, только в 3D. Мы используем скульпт, если у модели мягкие формы или органика. Программы для скульптинга (zBrush, mudbox, 3d coat) делают сетку настолько плотной, что наша модель становится мягкой и тянется как 3D-пластилин. Когда работаем со скульптом — можем работать с десятками и сотнями миллионов полигонов. Тяжелую сетку из программ по скульпту оптимизируют с помощью алгоритмов CAD геометрия — каждая поверхность задается формулой, поэтому модель гладкая и плавная, ее легко редактировать на любом этапе. CAD подходит для твердотельного моделирования из-за того, что модели получаются гладкими. Крутой CAD софт — Fusion 360. Его сделали для инженеров, чтобы они проектировали и собирали реальные мосты, машины, роботов.</item>
        <item>Это компромисс между бесконечно детализированными high poly и оптимизированными low poly. С этой сеткой делают детальные и интересные модели, которые клёво смотрятся в кадре, но в то же время они оптимизированы лучше, чем high poly. Mid poly больше используют для кино, чем для игр. В играх важно влезть в число полигонов установленное техническим директором, чтобы игра была быстрой и не лагала. А в кино важно, чтобы картинка была красивой, потому не так страшно перегрузить движок, просто рендерится фильм будет дольше.</item>

        <item>Что такое развертка В редакторе на модель можно наложить материал, выбрать его цвет и настроить блик. Но положить текстуры на 3D-объекты нельзя. Программа просто не знает как накладывать плоскую текстуру на геометрию. Для этого нам нужна 2D-развертка объемной модели. Развертка похожа на инверсное оригами. В оригами ты делаешь из плоского листа бумаги 3D-объект, а в развертке наоборот — из объемного делаешь плоское. В любом 3D-редакторе есть инструментарий для работы с UV. Например, функционала Maya хватит, чтобы сделать развёртку даже самой сложной модели. Но для удобства и редких фишек (таких как отрисовка паддинга) иногда используют программы для работы только с UV. Самые популярные — UV Layout и Rizom UV Для маппинга сложных форм мы пользуемся функцией авторазвертки. Из чего состоит развертка Внизу на картинке у куба 8 точек и 6 квадратных полигонов. На развертке тоже 6 квадратов, но точек больше 8, как на 3D-модели. Если ты выделишь на модели куба одну точку, то увидишь, что на развёртке выделится сразу несколько точек. Развертка нужна, чтобы наложить на нее текстуры. Давай для примера возьмём кузов от грузовика, сделаем на нем авторазвертку и наложим текстуру дерева. А теперь выделим на модели одну из дощечек и перенесем на UV вправо. Если изменить положение UV объекта — измениться и положение текстуры. Доска осталась на месте, а вот положение текстуры изменилось, потому что мы начали двигать ее развертку Все объекты на UV называются — UV шеллы (UV shell). Если повернуть шел — повернется и текстура на геометрии: Если изменить размер на UV, измениться размер текстуры на модели: Откроем Substance Painter и загрузим в него грузовик с разверткой. Если с разверткой все нормально, то никаких проблем не будет. Но иногда встречаются странные вещи: Во втором видео мы подпортили UV развертку, чтобы была видна разница между правильной и неправильной разверткой. Плохие текстуры портят даже идеально собранные модели. Если увидишь такие же проблемы, когда будешь текстурить — что-то не так в UV развертке. Давай разберемся откуда берутся такие глюки с текстурой и как их исправить. Есть 2 вида развертки на UV: Сделать уникальный маппинг; Сделать тайловый маппинг.</item>
        <item>В UV пространстве бесконечное количество квадратов, которые повторяют текстуру первого квадрата. То есть, всю развертку нужно уместить в один квадрат. На квадрат с разверткой накладывается текстура, а остальные просто ее повторяют. Это и есть уникальный маппинг. Его используют в твердотельном моделировании (Hard Surface) или для создания персонажей. А для объектов окружения, ландшафтов и зданий в основном используют тайловый мапинг. Один материал имеет только одну текстуру. Эта текстура растягивается на первый квадрат UV. В этом случае, чтобы замапить грузовик нам нужна текстура с деревом и с крашенным металлом. Если мы сделаем один материал под дерево, а другой под металл — дополнительно загрузим движок. Наша задача при маппинге использовать минимальное количество ресурсов. Поэтому, вместо того, чтобы плодить кучу лишних материалов, мы делаем всего один материал. Сначала разворачиваем все объекты на UV, потом кидаем в фотошоп или Substance Painter и красим эти элементы по отдельности. Мы замапили все объекты на UV только в первый квадрат. На выходе получилась одна единственная текстура и один материал, а мы тем самым сэкономили ресурсы игрового движка. Маппинг техники и персонажей имеет некоторые отличия.</item>
        <item>Тайловый маппинг Как мы уже говорили — квадраты на UV бесконечны. Текстура, которую мы положим в первый квадрат может повторяться бесконечное количество раз. Такое повторение текстур называется — тайл. Тайловый маппинг используется для развёртки зданий, предметов окружения и ландшафтов. Если мы хотим сделать развертку этого дома — сначала нужно создать материалы с бесшовными текстурами, а потом наложить геометрию с помощью авторазвертки (box mapping). Так делаем для каждого из объектов: для стены дома — материал с кирпичной кладкой, а для прилавка — другой материал с текстурой дерева. И так далее. В отличие от уникального маппинга, в тайловом UV шеллы могут выходить за пределы квадратов. Зачем это нужно? Представь что нам нужно затекстурить кирпичную стену. Если развёртка стен будет в первом квадрате — кирпичи будут слишком крупными. Потому, мы выбираем тайловый подход, чтобы можно было контролировать текстуры так, как нам нужно. Вот так выглядит наш дом после развертки и текстур.</item>
        <item>Тайловые текстуры не имеют швов, но когда работаешь с ними нужно учитывать нюансы. Например, в нашей сцене несколько разных фруктов. Каждый материал — это отдельный вызов отрисовки в игровом движке. Чтобы не создавать под каждый из фруктов отдельный материал мы рисуем одну текстуру и маппим на нее все фрукты. Получаем в одной текстуре сразу несколько покрашенных объектов — это называется атлас. Атласы часто используют в играх, чтобы экономить затраты движка на прорисовку текстур. Лучше всего работать с квадратными текстурами. Потому, если текстура прямоугольная — она растянется до квадрата. Из-за особенностей цифровых вычислений, разрешение текстур всегда стараются делать кратными степени двойки. Сторона текстуры может быть 32 пикселя в ширину или 64, 128, 256, 512, 1024, 2048 и даже 4096 пикселей. Текстуры кратные степени двойки заполняют целые ячейки видеопамяти. Если вместо текстуры 1024х1024 засунуть в движок текстуру размером 1000х1000 — она не заполнит всю ячейку видеопамяти и ее обработка потребует больше ресурсов от видеокарты. Из-за такой мелочи игра потеряет в производительности.</item>
        <item>Когда делаешь развертку, могут появиться косяки, как с нашим грузовиком. Но во всех программах есть «чекер». Это текстура с шахматной доской, которую используют для проверки развертки. Он выглядит вот так: Если квадраты на чекере неодинакового размера — при текстурировании возникнут проблемы. Для таких случаев есть Unfold — функция, которая исправляет ошибки на UV. Если заметил неровности — жми на кнопку и программа все исправит Но сложные модели нужно будет маппить самому. Взять лоуполи, сделать авторазвертку, а потом нажать Unfold — это далеко не все. Тебе нужно выбрать способ маппинга модели, правильно развернуть элементы, сделать оверлапы, уместить шеллы внутри первого квадрата и еще много всего. Чек лист по UV маппингу: Развернуть все элементы на UV Исправить косяки авторазвертки через Unfold Исправить косяки после Unfold Сделать чекер везде ровным, без потягов Разложить все элементы в пространстве от 0 до 1 Что делать, если появились проблемы с разверткой Потяги на UV — чекер не квадратный Если видишь нечто подобное — исправляй через Unfold. Если он не поможет — исправляй руками. Квадраты чекера разного размера Чтобы понять почему квадраты меняют размер, нужно знать, что такое тексель. Тексель — это количество пикселей на метр, сантиметр, или дюйм. Он показывает, насколько детальной будет текстура. В шутерах тексель высокий, потому что игроки сильно приближаются к объектам. В играх от 3 лица тексель ниже, а в стратегиях минимальный. Чтобы не перегружать движок важно, чтобы объекты переднего плана имели высокий тексель, а среднего и дальнего плана — низкий. Если мы правильно сделали развертку, квадраты чекера будут одного размера. Если сделать один из шеллов меньше — квадраты чекера увеличатся, а тексель уменьшится. Это может стать бедой для модели, а может быть и лайфхаком. Если моделишь грузовик, хорошая практика — на днище сделать тексель меньше, потому что игроки вряд ли его увидят в игре. А ты сэкономишь место на UV для чего-нибудь более важного. Слишком много свободного места на UV пространстве Нужно увеличить размер шеллов и перепаковать, чтобы они полностью заняли первый квадрат. Тогда тексель будет выше, а текстура детализированнее. Объекты на UV пересекаются Если шеллы пересекутся — на модели появятся артефакты. Исключение из этого правила — оверлапы. В них мы осознанно накладываем шеллы друг на друга. Кривые оверлапы Если объекты не идеально лежат друг на друге, появляются швы на текстурах</item>

        <item>Что такое запечка в 3D Взглянем на low poly модель Минимум полигонов и чистая сетка. Эта модель будет загружаться в игровой движок. Есть ещё high poly модель с высокой детализацией и скульпт. При помощи запечки мы переносим детали с high poly и скульпта на low poly модель. В итоге, в игровом движке будет легкая low poly модель с минимальным количеством полигонов, но выглядеть она будет так, будто на ней куча деталей: На low poly мы добавляем запеченные карты нормала и карту затенений. Это карты, которые обманывают поведение игрового света. Свет падает под определенным углом на модель и создает блик. В итоге нам кажется, что в модели много фасок, деталей и вырезов. На этапе запечки наша задача — запечь 3 карты: Normal map — карту неровностей Ambient Occlusion (AO) — карту затенения Color ID — цветные маски Если добавим Normal map и AO на low poly модель — на ней появится детализация с high poly и скульпта. Благодаря Color ID модель легче разбить по материалам и текстурировать. Эти карты создают на основе развертки, которую мы делали этапом ранее. Помни, если есть ошибки на развертке или low poly модели — будет куча проблем с артефактами.</item>
        <item>Что делать перед тем, как начать запечку Мы уже подготовили low poly, high poly и развертку к запечке. Но прежде чем нажимать волшебную кнопку, нужно выполнить еще три простых действия, которые помогут в дальнейшем. Нейминг Правильный нейминг сэкономит гору времени во время работы с группами запечки — лишний мусор не будет мешать при работе. Проверяем, совпадает ли нейминг внутри группы low poly с неймингом внутри high poly. Например: lowpoly -> barrel sculpt -> zbrush_barrel highpoly -> high_barrel Удаляем мусор В Maya есть полезная функция File → Optimize Scene Size, которая удаляет из сцены мусор, который нигде не используется. Лишние слои, материалы и пустые группы. Backup Backup похож на резервное копирование, он поможет не потерять проделанную работу. Во время запечки иногда приходится править часть геометрии. Где-то добавятся фаски, где-то поддержки, и так далее. Поэтому может начаться настоящий хаос, если не сохранить исходник модели. Перед запечкой создаем отдельную папку «Bake» и сохраняем туда бэкап исходного файла до начала запечки — на всякий случай.</item>
        <item>Normal Map создает виртуальные векторы направления в каждой точке low poly модели и меняет поведение света. Если наложить запеченный нормал на модель — она будет выглядеть почти как high poly. Новые полигоны не создаются, это лишь иллюзия формы: Чтобы создать Normal map, мы берем развертку с high poly или скульпта, загружаем в программу для запечки и нажимаем кнопку «bake». Небольшие черные полосы на нормале — это нормально. Никто не будет разглядывать модель под микроскопом. Из-за того, что игрок видит модель в игре на расстоянии, нам не нужно тратить несколько часов, чтобы убрать черные полоски на нормале: Normal map создает иллюзию объема из-за трех карт в каналах текстуры: красной, зеленой, синей. Чтобы переключаться между каналами, откроем файл с нормалом в Photoshop и зайдем во вкладку Channels. Красный канал показывает искажение вертекс нормалей по горизонтали. Чем светлее пятно на красном канале — тем сильнее виртуальная поверхность наклонена вправо, а чем темнее — тем больше поверхность бликует влево. Зеленый канал работает так же, но искажает шейдинг по вертикали. Светлый блик поворачивается наверх, а темный вниз. Чтобы лучше понять разницу между этими двумя каналами, взглянем на эту часть модели: Затемнение идет только по одной из осей. Так как красный канал нормала показывает искажение вертекс нормалей по горизонтали, на нем будет много информации (скосы между досками как раз и отклоняются влево или вправо). Зеленый же канал показывает искажения по вертикали. Виртуальные плоскости не отклоняются вверх или вниз, поэтому затемнений и информации на нормале в этом канале почти нет: Красный и зеленый каналы — основные для моделлеров. Но у нормала есть еще и синий канал. Он имитирует углубления в объекте, но в играх практически не используется. За счет изменения синего цвета на нормале создаются искажения на плоской поверхности. Если из-за синего канала на модели артефакты, мы можем просто выключить этот канал, он нам не нужен. Если после запечки есть артефакты, нормал нужно править руками. Иногда это делают сразу на всех трёх каналах, а иногда — на одном из них. 128х128х255 — нейтральный цвет нормала. Если добавить полностью нейтральный нормал — особой разницы видно не будет. Модель будет шейдить так же, как обычная low poly. В каком формате лучше хранить нормал? После запечки часто приходится вносить изменения в нормал при помощи Фотошопа. Поэтому файл лучше сохранять в форматах Targa или TIF. При сохранении есть выбор, сохранять в 24 или 32 bit. Если есть Альфа-канал — сохраняем с 32 bit. Если Альфа-канала нет — в 24 bit.</item>
        <item>Ambient occlusion (AO) — это карта затенения. Она показывает самые глубокие тени в объекте — в основном в углублениях и на пересечениях. Эту карту используют в игровых движках для создания корректного освещения и в текстурировании. Например, без АО почти нереально сделать грязь. Но с картой АО мы легко сгенерируем маску углублений, чтобы забить их грязью. Так же как и нормал, карта АО печется на развертку модели из high poly и скульпта. По-умолчанию карта черно-белая, но на этапе текстурирования ее можно покрасить. Пример карты</item>
        <item>Наша модель молота состоит из разных материалов: металла, камня, дерева и ткани. Во время текстурирования нам нужно быстро выделять геометрию, которую мы хотим затекстурить. Чтобы это сделать в один клик внутри Substance Painter, нужно запечь карту Color ID. Она поможет выделять большие куски модели. Это поможет легко затекстурить выбранную группу объектов. Чтобы создать карту Color ID, нужно покрасить high poly модель в разные цвета. Один цвет — это одна группа объектов разбитая по материалам. Например, все дерево на Color ID — оранжевое, вся кожа — розовая, ржавый металл — синий, шерсть — голубая, а новый металл — зеленый. Color ID — не цвета будущей модели, эта карта нужна для разделения на разные материалы. Пример карты</item>
        <item>Что делать, чтобы на модели не было артефактов Правильно подготовить low poly к запечке Для этого мы следим за шейдингом модели. Вот пример плохого и хорошего шейдинга: Cекрет хорошего шейдинга — в правильной работе с хардами и софтами: Если угол 90 градусов — ставим хард. Если угол меньше 90 градусов — ставим хард. Если угол больше 90 градусов — ставим софт. Даже если угол 91 градус, ставим софт. Есть нюанс: если начал делать луп хардами, нужно продолжать хардами по всей его длине, иначе появятся артефакты: Убирать зазоры между геометрией Следим, чтобы не было дырок между геометрией. Триангулировать модель Проверив всю low poly модель, обязательно включаем функцию триангуляции. Если не триангулировать модель перед запечкой — в разном софте она будет смотреться по-разному.</item>
    </string-array>
    <string name="logIn">Log in</string>
    <string name="logOut">Log out</string>
</resources>